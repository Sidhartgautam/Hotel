# Generated by Django 5.0.7 on 2025-03-03 09:43

import ckeditor.fields
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('country', '0001_initial'),
        ('currency', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Amenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BreakfastInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serve_breakfast', models.BooleanField(default=False)),
                ('breakfast_included', models.BooleanField(default=False)),
                ('breakfast_type', models.JSONField(blank=True, default=list, help_text="List of breakfast types served (e.g., ['continental', 'vegan'])", null=True)),
                ('extra_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Extra cost for breakfast if not included', max_digits=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CancellationPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cancellations_allowed', models.BooleanField(default=True, help_text='Indicates if cancellations are allowed for this property.')),
                ('cancellation_deadline_days', models.PositiveIntegerField(blank=True, default=0, help_text='Number of days before check-in when cancellations are allowed (0 means any time).', null=True)),
                ('cancellation_fee_type', models.CharField(choices=[('percentage', 'Percentage of Total Price'), ('fixed', 'Fixed Amount'), ('none', 'No Fee')], default='none', help_text='Type of cancellation fee (percentage, fixed, or none).', max_length=20)),
                ('cancellation_fee_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Amount of the cancellation fee (either percentage or fixed).', max_digits=10, null=True)),
                ('refundable', models.BooleanField(default=True, help_text='Indicates if the booking amount is refundable after cancellation.')),
                ('additional_notes', models.TextField(blank=True, help_text='Additional notes or terms regarding the cancellation policy.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ParkingInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('parking_availability', models.CharField(choices=[('free', 'Free'), ('paid', 'Paid'), ('not_available', 'Not Available')], default='not_available', help_text='Indicates if parking is free, paid, or not available', max_length=20)),
                ('parking_price', models.DecimalField(blank=True, decimal_places=2, help_text='Price for parking if it is paid', max_digits=10, null=True)),
                ('reservation_required', models.BooleanField(default=False, help_text='Indicates if a reservation is required for parking')),
                ('parking_location', models.CharField(blank=True, choices=[('onsite', 'Onsite'), ('offsite', 'Offsite')], help_text='Indicates if parking is onsite or offsite', max_length=20, null=True)),
                ('parking_access', models.CharField(blank=True, choices=[('private', 'Private'), ('public', 'Public')], help_text='Indicates if parking is private or public', max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Policy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checkin_time_from', models.TimeField(blank=True, help_text='Time when check-in starts (e.g., 14:00).', null=True)),
                ('checkin_time_to', models.TimeField(blank=True, help_text='Time when check-in ends (e.g., 23:59).', null=True)),
                ('checkout_time_from', models.TimeField(blank=True, help_text='Time when check-out starts (e.g., 06:00).', null=True)),
                ('checkout_time_to', models.TimeField(blank=True, help_text='Time by which guests must check out (e.g., 12:00).', null=True)),
                ('children_allowed', models.BooleanField(default=True, help_text='Are children allowed?')),
                ('extra_beds_available', models.BooleanField(default=False, help_text='Are extra beds available for children?')),
                ('extra_bed_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Cost of an extra bed if available.', max_digits=10, null=True)),
                ('pets_allowed', models.BooleanField(default=False, help_text='Are pets allowed?')),
                ('pet_fee', models.DecimalField(blank=True, decimal_places=2, help_text='Fee for bringing pets, if applicable.', max_digits=10, null=True)),
                ('pet_details', models.TextField(blank=True, help_text='Additional details about the pet policy (e.g., allowed pet types or size limits).', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PropertyAmenities',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_available', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='PropertyCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('category_name', models.CharField(max_length=50)),
                ('description', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='category/')),
            ],
        ),
        migrations.CreateModel(
            name='PropertyImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(blank=True, null=True, upload_to='property/')),
            ],
        ),
        migrations.CreateModel(
            name='SingleUnitPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_price_per_night', models.DecimalField(decimal_places=2, max_digits=10)),
                ('seasonal_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('discount_percentage', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('property_name', models.CharField(max_length=50)),
                ('is_single_unit', models.BooleanField(blank=True, default=False, help_text='Indicates if this property is booked as a single unit (e.g., cottage or villa).', null=True)),
                ('description', models.TextField()),
                ('star_rating_property', models.IntegerField(blank=True, default=0, null=True)),
                ('address', models.CharField(max_length=50)),
                ('state', models.CharField(max_length=50)),
                ('lng', models.DecimalField(blank=True, decimal_places=6, max_digits=11, null=True)),
                ('lat', models.DecimalField(blank=True, decimal_places=6, max_digits=11, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('language', models.CharField(max_length=50)),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='country.city')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='country.country')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='currency.currency')),
            ],
        ),
    ]
